services:
  kong:
    image: kong/kong-gateway:3.4.1.1
    container_name: kong-gateway
    user: "kong"
    depends_on:
      - inventory-api
      - retail-api
      - ecommerce-api
      - reporting-api
      - saga-orchestrator-api
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_LOG_LEVEL: info
      KONG_PLUGINS: bundled,key-auth,rate-limiting,request-transformer,response-transformer,prometheus
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong-declarative.yml
    ports:
      - "9000:8000"
      - "9443:8443"
      - "9001:8001"
      - "9444:8444"
      - "9002:8002"
      - "9445:8445"
    volumes:
      - ./kong/kong-declarative.yml:/kong/declarative/kong-declarative.yml:ro
      - kong_prefix_vol:/var/lib/kong
      - kong_tmp_vol:/tmp
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus-kong
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-kong-loadbalanced.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - microservices-network
    depends_on:
      - kong
      - inventory-api
      - retail-api
      - ecommerce-api
      - reporting-api

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana-kong
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - microservices-network
    depends_on:
      - prometheus

  inventory-api:
    build: ./services/inventory-api
    container_name: inventory-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@inventory-db-lb:5432/inventory_db
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=inventory-api-1
      - PORT=8001
    ports:
      - "8014:8001"
    depends_on:
      inventory-db-lb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health', timeout=5)"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  retail-api:
    build: ./services/retail-api
    container_name: retail-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@retail-db:5432/retail_db
      - INSTANCE_ID=retail-api-1
    ports:
      - "8002:8002"
    depends_on:
      retail-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ecommerce-api:
    build: ./services/ecommerce-api
    container_name: ecommerce-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@ecommerce-db:5432/ecommerce_db
      - SECRET_KEY=your-super-secret-key-change-in-production
      - PRODUCTS_API_URL=http://kong:8000/inventory
      - STOCK_API_URL=http://kong:8000/inventory
      - INVENTORY_API_URL=http://kong:8000/inventory
      - KONG_INVENTORY_API_URL=http://kong:8000/inventory
      - REDIS_URL=redis://redis:6379/0
      - INSTANCE_ID=ecommerce-api-1
      - KONG_API_KEY=admin-api-key-12345
      - EVENT_BUS_URL=redis://redis:6379/0
      - EVENT_STREAM=ecommerce.carts.events
      - ORDERS_EVENT_STREAM=ecommerce.orders.events
      - PAYMENTS_EVENT_STREAM=ecommerce.payments.events
    ports:
      - "8000:8000"
    depends_on:
      ecommerce-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      event-store-db:
        condition: service_started
      inventory-api:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  reporting-api:
    build: ./services/reporting-api
    container_name: reporting-api
    environment:
      - REPORTING_DATABASE_URL=postgresql://postgres:password@reporting-db:5432/reporting_db
      - INVENTORY_API_URL=http://inventory-api:8001/api/v1
      - RETAIL_API_URL=http://retail-api:8002/api/v1
      - ECOMMERCE_API_URL=http://ecommerce-api:8000/api/v1
      - KONG_INVENTORY_API_URL=http://kong:8000/inventory/api/v1
      - KONG_RETAIL_API_URL=http://kong:8000/retail/api/v1
      - KONG_ECOMMERCE_API_URL=http://kong:8000/ecommerce/api/v1
      - INSTANCE_ID=reporting-api-1
    ports:
      - "8005:8005"
    depends_on:
      reporting-db:
        condition: service_healthy
      inventory-api:
        condition: service_healthy
      retail-api:
        condition: service_healthy
      ecommerce-api:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8005/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  event-audit-api:
    build: ./services/event-audit-api
    container_name: event-audit-api
    environment:
      - EVENT_STORE_URL=postgresql://postgres:password@event-store-db:5432/event_store
      - EVENT_BUS_URL=redis://redis:6379/0
      - EVENT_STREAM=ecommerce.carts.events
      - EVENT_GROUP=audit-consumers
      - INSTANCE_ID=event-audit-api-1
    depends_on:
      event-store-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8010:8010"
    command: ["python", "-m", "src.uvicorn_runner"]
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8010/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  event-notifier:
    build: ./services/event-notifier
    container_name: event-notifier
    environment:
      - EVENT_BUS_URL=redis://redis:6379/0
      - EVENT_STREAM=ecommerce.carts.events
      - EVENT_GROUP=notifier-consumers
      - INSTANCE_ID=event-notifier-1
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8011:8011"
    command: ["python", "-m", "src.uvicorn_runner"]
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8011/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  inventory-saga-consumer:
    build: ./services/inventory-saga-consumer
    container_name: inventory-saga-consumer
    environment:
      - EVENT_BUS_URL=redis://redis:6379/0
      - ORDERS_EVENT_STREAM=ecommerce.orders.events
      - PAYMENTS_EVENT_STREAM=ecommerce.payments.events
      - INVENTORY_API_URL=http://inventory-api:8001
      - EVENT_GROUP=inventory-saga
      - INSTANCE_ID=inventory-saga-1
    depends_on:
      redis:
        condition: service_healthy
      inventory-api:
        condition: service_healthy
    ports:
      - "8012:8012"
    command: ["python", "-m", "src.uvicorn_runner"]
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8012/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  saga-orchestrator-api:
    build: ./services/saga-orchestrator-api
    container_name: saga-orchestrator-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@saga-db:5432/saga_db
      - INVENTORY_API_URL=http://kong:8000/inventory
      - RETAIL_API_URL=http://kong:8000/retail
      - ECOMMERCE_API_URL=http://kong:8000/ecommerce
      - REPORTING_API_URL=http://kong:8000/reporting
      - KONG_API_KEY=admin-api-key-12345
      - INSTANCE_ID=saga-orchestrator-api-1
    ports:
      - "8006:8004"
    depends_on:
      saga-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8004/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  event-store-db:
    image: postgres:15
    container_name: event-store-db
    environment:
      POSTGRES_DB: event_store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - event_store_db_data:/var/lib/postgresql/data
    ports:
      - "5460:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-db-lb:
    image: postgres:15
    container_name: inventory-db-lb
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5443:5432"
    networks:
      - microservices-network
    volumes:
      - inventory_db_lb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  retail-db:
    image: postgres:15
    container_name: retail-db
    environment:
      POSTGRES_DB: retail_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - retail_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  ecommerce-db:
    image: postgres:15-alpine
    container_name: ecommerce-db
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5450:5432"
    volumes:
      - ecommerce_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  reporting-db:
    image: postgres:15
    container_name: reporting-db
    environment:
      POSTGRES_DB: reporting_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - reporting_db_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  saga-db:
    image: postgres:15
    container_name: saga-db
    environment:
      POSTGRES_DB: saga_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - saga_db_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  kong_prefix_vol:
  kong_tmp_vol:
  prometheus_data:
  grafana_data:
  inventory_db_lb_data:
  retail_db_data:
  ecommerce_db_data:
  reporting_db_data:
  saga_db_data:
  redis_data:
  event_store_db_data:

networks:
  microservices-network:
    driver: bridge
